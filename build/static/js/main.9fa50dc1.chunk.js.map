{"version":3,"sources":["components/Redux/auth/auth-operations.js","components/Redux/auth/auth-selectors.js","components/Redux/auth/auth-slice.js","components/Redux/middlewear/logger.js","components/Redux/Contacts/contactsOperations.js","components/Redux/Contacts/contactsSlice.js","components/Redux/store .js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/Navigation.js","components/UserMenu/UserMenu.js","components/AuthNav.js","components/AppBar.js","components/PrivateRoute.js","components/PublicRoute.js","components/App/App.jsx","index.js"],"names":["axios","defaults","baseURL","token","headers","common","Authorization","register","createAsyncThunk","credentials","a","post","data","logIn","logOut","fetchCurrentUser","_","thunkAPI","state","getState","persistedToken","auth","console","log","rejectWithValue","get","operations","authSelectors","getIsLoggedIn","isLoggedIn","getUsername","user","name","getIsFetchingCurrent","isFetchingCurrentUser","authSlice","createSlice","initialState","email","extraReducers","authOperations","fulfilled","action","payload","pending","rejected","customMiddlewareLogger","store","next","type","getContacts","addContact","contact","deleteContact","id","delete","conatactsSlice","items","filter","reducers","chengeFilter","builder","addCase","idx","findIndex","splice","actions","persistContactsConfig","key","storage","whitelist","authPersistConfig","configureStore","reducer","contacts","persistReducer","contactsReducer","authReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","devTools","process","persistor","persistStore","ContactForm","onSubmit","useState","setName","number","setNumber","className","e","preventDefault","pattern","title","required","value","onChange","target","ContactList","onDelete","useSelector","normalizedFilter","toLowerCase","includes","filteredContacts","map","onClick","Filter","dispatch","useDispatch","contactsActions","styles","link","display","textDecoration","padding","fontWeight","color","activeLink","Navigation","to","exact","style","activeStyle","container","alignItems","avatar","marginRight","UserMenu","width","AuthNav","header","justifyContent","borderBottom","AppBar","PrivateRoute","children","redirectTo","routeProps","PublicRoute","restricted","shouldRedirect","RegisterView","lazy","LoginView","App","useEffect","fallback","path","some","alert","newContact","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.9fa50dc1.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport { createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\r\n\r\nconst token = {\r\n  set(token) {\r\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n  },\r\n  unset() {\r\n    axios.defaults.headers.common.Authorization = '';\r\n  },\r\n};\r\n\r\n/*\r\n * POST @ /users/signup\r\n * body: { name, email, password }\r\n * После успешной регистрации добавляем токен в HTTP-заголовок\r\n */\r\nconst register = createAsyncThunk('auth/register', async credentials => {\r\n  try {\r\n    const { data } = await axios.post('/users/signup', credentials);\r\n    token.set(data.token);\r\n    return data;\r\n  } catch (error) {\r\n    // TODO: Добавить обработку ошибки error.message\r\n  }\r\n});\r\n\r\n/*\r\n * POST @ /users/login\r\n * body: { email, password }\r\n * После успешного логина добавляем токен в HTTP-заголовок\r\n */\r\nconst logIn = createAsyncThunk('auth/login', async credentials => {\r\n  try {\r\n    const { data } = await axios.post('/users/login', credentials);\r\n    token.set(data.token);\r\n    return data;\r\n  } catch (error) {\r\n    // TODO: Добавить обработку ошибки error.message\r\n  }\r\n});\r\n\r\n/*\r\n * POST @ /users/logout\r\n * headers: Authorization: Bearer token\r\n * После успешного логаута, удаляем токен из HTTP-заголовка\r\n */\r\nconst logOut = createAsyncThunk('auth/logout', async () => {\r\n  try {\r\n    await axios.post('/users/logout');\r\n    token.unset();\r\n  } catch (error) {\r\n    // TODO: Добавить обработку ошибки error.message\r\n  }\r\n});\r\n/*\r\n * GET @ /users/current\r\n * headers:\r\n *    Authorization: Bearer token\r\n *\r\n * 1. Забираем токен из стейта через getState()\r\n * 2. Если токена нет, выходим не выполняя никаких операций\r\n * 3. Если токен есть, добавляет его в HTTP-заголовок и выполянем операцию\r\n */\r\nconst fetchCurrentUser = createAsyncThunk(\r\n  'auth/refresh',\r\n  async (_, thunkAPI) => {\r\n    const state = thunkAPI.getState();\r\n    const persistedToken = state.auth.token;\r\n\r\n    if (persistedToken === null) {\r\n      console.log('Токена нет, уходим из fetchCurrentUser');\r\n      return thunkAPI.rejectWithValue();\r\n    }\r\n\r\n    token.set(persistedToken);\r\n    try {\r\n      const { data } = await axios.get('/users/current');\r\n      return data;\r\n    } catch (error) {\r\n      // TODO: Добавить обработку ошибки error.message\r\n    }\r\n  },\r\n);\r\n\r\nconst operations = {\r\n  register,\r\n  logOut,\r\n  logIn,\r\n  fetchCurrentUser,\r\n};\r\nexport default operations;\r\n","\r\nconst getIsLoggedIn = state => state.auth.isLoggedIn;\r\n\r\nconst getUsername = state => state.auth.user.name;\r\n\r\nconst getIsFetchingCurrent = state => state.auth.isFetchingCurrentUser;\r\n\r\nconst authSelectors = {\r\n  getIsLoggedIn,\r\n  getUsername,\r\n  getIsFetchingCurrent,\r\n};\r\nexport default authSelectors;","import { createSlice } from '@reduxjs/toolkit';\r\nimport authOperations from './auth-operations';\r\n\r\nconst initialState = {\r\n  user: { name: null, email: null },\r\n  token: null,\r\n  isLoggedIn: false,\r\n  isFetchingCurrentUser: false,\r\n};\r\n\r\nconst authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState,\r\n  extraReducers: {\r\n    [authOperations.register.fulfilled](state, action) {\r\n      state.user = action.payload.user;\r\n      state.token = action.payload.token;\r\n      state.isLoggedIn = true;\r\n    },\r\n    [authOperations.logIn.fulfilled](state, action) {\r\n      state.user = action.payload.user;\r\n      state.token = action.payload.token;\r\n      state.isLoggedIn = true;\r\n    },\r\n    [authOperations.logOut.fulfilled](state) {\r\n      state.user = { name: null, email: null };\r\n      state.token = null;\r\n      state.isLoggedIn = false;\r\n    },\r\n    [authOperations.fetchCurrentUser.pending](state) {\r\n      state.isFetchingCurrentUser = true;\r\n    },\r\n    [authOperations.fetchCurrentUser.fulfilled](state, action) {\r\n      state.user = action.payload;\r\n      state.isLoggedIn = true;\r\n      state.isFetchingCurrentUser = false;\r\n    },\r\n    [authOperations.fetchCurrentUser.rejected](state) {\r\n      state.isFetchingCurrentUser = false;\r\n    },\r\n  },\r\n});\r\n\r\nexport default authSlice.reducer;","const myMiddleware = store => next => action => {\r\n  console.group(action.type);\r\n  const prevState = store.getState();\r\n  console.log('prevState', prevState);\r\n  console.info('action', action);\r\n  const result = next(action);\r\n  const newState = store.getState();\r\n  console.log('newState', newState);\r\n  console.groupEnd();\r\n  return result;\r\n};\r\n\r\nconst customMiddlewareLogger = store => next => action => {\r\n  if (action.payload) {\r\n    console.log(`%c ${action.type}:`, 'color: #6a0', action.payload);\r\n  }\r\n  return next(action);\r\n};\r\n\r\nexport { customMiddlewareLogger, myMiddleware };\r\n","import { createAsyncThunk } from '@reduxjs/toolkit';\r\n// import * as api from '../../Servises/api';\r\nimport axios from 'axios';\r\n\r\nconst getContacts = createAsyncThunk('contacts/getContactsStatus', async () => {\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n    return data;\r\n  } catch (error) {}\r\n});\r\n\r\nconst addContact = createAsyncThunk(\r\n  'contacts/addContactStatus',\r\n  async contact => {\r\n    try {\r\n      const { data } = await axios.post('/contacts', contact);\r\n      return data;\r\n    } catch (error) {}\r\n  },\r\n);\r\n\r\nconst deleteContact = createAsyncThunk(\r\n  'contacts/deleteContactStatus',\r\n  async id => {\r\n    try {\r\n      const { data } = await axios.delete(`/contacts/${id}`);\r\n      return data;\r\n    } catch (error) {}\r\n  },\r\n);\r\n\r\nexport { getContacts, addContact, deleteContact };\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport { getContacts, addContact, deleteContact } from './contactsOperations';\r\n\r\nconst initialState = {\r\n  items: [],\r\n  filter: '',\r\n};\r\n\r\nconst conatactsSlice = createSlice({\r\n  name: 'contacts',\r\n  initialState,\r\n  reducers: {\r\n    chengeFilter: (state, action) => ({ ...state, filter: action.payload }),\r\n  },\r\n  extraReducers: builder => {\r\n    builder\r\n      .addCase(getContacts.fulfilled, (state, { payload }) => {\r\n        state.items = payload;\r\n      })\r\n      .addCase(addContact.fulfilled, (state, action) => ({\r\n        ...state,\r\n        items: [action.payload, ...state.items],\r\n      }))\r\n      .addCase(deleteContact.fulfilled, (state, { payload }) => {\r\n        const idx = state.items.findIndex(contact => contact.id === payload.id);\r\n        state.items.splice(idx, 1);\r\n      });\r\n  },\r\n});\r\n\r\nexport const { chengeFilter } = conatactsSlice.actions;\r\n\r\nexport default conatactsSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport { customMiddlewareLogger } from './middlewear/logger';\r\nimport { authReducer } from './auth';\r\nimport {\r\n  persistReducer,\r\n  persistStore,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\r\n\r\nimport contactsReducer from './Contacts/contactsSlice';\r\n\r\nconst persistContactsConfig = {\r\n  key: 'filter',\r\n  storage,\r\n  whitelist: ['filter'],\r\n};\r\n///////////////////////\r\nconst authPersistConfig = {\r\n  key: 'auth',\r\n  storage,\r\n  whitelist: ['token'],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(persistContactsConfig, contactsReducer),\r\n    auth: persistReducer(authPersistConfig, authReducer),\r\n  },\r\n  middleware: getDefaultMiddleware =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }).concat(customMiddlewareLogger),\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport { store, persistor };\r\n","import { useState } from \"react\";\r\nimport \"./ContactForm.css\";\r\n\r\nconst ContactForm = ({ onSubmit }) => {\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n\r\n  ////// записує контакт\r\n\r\n  const handleChangeName = ({ target }) => {\r\n    const { value } = target;\r\n    setName(value);\r\n  };\r\n\r\n  const handleChangeNumber = ({ target }) => {\r\n    const { value } = target;\r\n    setNumber(value);\r\n  };\r\n\r\n  ////передає імя і тел\r\n  const handelSubmit = (e) => {\r\n    e.preventDefault();\r\n    onSubmit({ name, number });\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form className=\"heading\" onSubmit={handelSubmit}>\r\n        <label>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n            required\r\n            value={name}\r\n            onChange={handleChangeName}\r\n          />\r\n        </label>\r\n        <label>\r\n          Phone\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n            required\r\n            value={number}\r\n            onChange={handleChangeNumber}\r\n          />\r\n        </label>\r\n        <button className=\"button8\" type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n","import './ContactList.css';\r\nimport { useSelector } from 'react-redux';\r\n// import { contactsActions } from '../Redux/Contacts';\r\n\r\n  \r\n\r\n\r\nconst ContactList = ({  onDelete }) => {\r\n\r\n  const filter = useSelector((state) => state.contacts.filter);\r\n  const contacts = useSelector(state => state.contacts.items);\r\n  \r\n  const filteredContacts = () => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    console.log(contacts)\r\n\r\n    return contacts?.filter(({ name }) =>\r\n      name?.toLowerCase().includes(normalizedFilter)\r\n    );\r\n  };\r\n\r\n\r\n  return (\r\n\r\n\r\n    <ul className=\"list\">\r\n      {filteredContacts().map(({ id, name, number  }) => (\r\n        <>\r\n          <li className=\"item\" key={id}>\r\n            {name} : {number}\r\n          </li>\r\n          <button className=\"button9\" type=\"button\" onClick={onDelete(id)}>\r\n            Delete {name}\r\n          </button>\r\n        </>\r\n      ))}\r\n    </ul>\r\n  );\r\n\r\n  \r\n}\r\nexport default ContactList;\r\n","// import PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n//import { changeFilter } from '../Redux/Contacts/contactsActions';\r\nimport { contactsActions } from '../Redux/Contacts';\r\n\r\nconst Filter = ({ onChange }) => {\r\n\r\n  const filter = useSelector((state) => state.contacts.filter);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <label className=\"heading\">\r\n      Find contact by name\r\n      <input\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n        required\r\n        value={filter}\r\n        onChange={e => dispatch(contactsActions.chengeFilter(e.target.value))}\r\n      />\r\n    </label>\r\n  );\r\n\r\n  // Filter.propTypes = {\r\n  //   onChange: PropTypes.func,\r\n  // };\r\n};\r\nexport default Filter;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { authSelectors } from '../components/Redux/auth';\r\n\r\nconst styles = {\r\n  link: {\r\n    display: 'inline-block',\r\n    textDecoration: 'none',\r\n    padding: 12,\r\n    fontWeight: 700,\r\n    color: '#2A363B',\r\n  },\r\n  activeLink: {\r\n    color: '#E84A5F',\r\n  },\r\n};\r\n\r\nconst Navigation = () => {\r\n  const isLoggedIn = useSelector(authSelectors.getIsLoggedIn);\r\n  return (\r\n    <nav>\r\n      <NavLink to=\"/\" exact style={styles.link} activeStyle={styles.activeLink}>\r\n        Главная\r\n      </NavLink>\r\n\r\n      {isLoggedIn && (\r\n        <>\r\n          <NavLink\r\n            to=\"/contacts\"\r\n            exact\r\n            style={styles.link}\r\n            activeStyle={styles.activeLink}\r\n          >\r\n            Контакти\r\n          </NavLink>\r\n          {/* <NavLink\r\n            to=\"/upload\"\r\n            exact\r\n            style={styles.link}\r\n            activeStyle={styles.activeLink}\r\n          >\r\n            Загрузить\r\n          </NavLink> */}\r\n        </>\r\n      )}\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport { authSelectors, authOperations } from '../Redux/auth';\r\nimport { ImGrin2 } from 'react-icons/im';\r\n\r\nconst styles = {\r\n  container: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    marginRight: 4,\r\n  },\r\n  name: {\r\n    fontWeight: 700,\r\n    marginRight: 12,\r\n  },\r\n};\r\n\r\nexport default function UserMenu() {\r\n  const dispatch = useDispatch();\r\n  const name = useSelector(authSelectors.getUsername);\r\n  // const avatar = defaultAvatar;\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      <ImGrin2 width=\"32\" style={styles.avatar} />\r\n      <span style={styles.name}>Добро пожаловать, {name}</span>\r\n      <button type=\"button\" onClick={() => dispatch(authOperations.logOut())}>\r\n        Выйти\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst styles = {\r\n  link: {\r\n    display: 'inline-block',\r\n    textDecoration: 'none',\r\n    padding: 12,\r\n    fontWeight: 700,\r\n    color: '#2A363B',\r\n  },\r\n  activeLink: {\r\n    color: '#E84A5F',\r\n  },\r\n};\r\n\r\nexport default function AuthNav() {\r\n  return (\r\n    <div>\r\n      <NavLink\r\n        to=\"/register\"\r\n        exact\r\n        style={styles.link}\r\n        activeStyle={styles.activeLink}\r\n      >\r\n        Регистрация\r\n      </NavLink>\r\n      <NavLink\r\n        to=\"/login\"\r\n        exact\r\n        style={styles.link}\r\n        activeStyle={styles.activeLink}\r\n      >\r\n        Логин\r\n      </NavLink>\r\n    </div>\r\n  );\r\n}\r\n","import { useSelector } from 'react-redux';\r\nimport Navigation from './Navigation';\r\nimport UserMenu from './UserMenu';\r\nimport AuthNav from './AuthNav';\r\nimport { authSelectors } from '../components/Redux/auth';\r\n\r\nconst styles = {\r\n  header: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    borderBottom: '1px solid #2A363B',\r\n  },\r\n};\r\n\r\nexport default function AppBar() {\r\n  const isLoggedIn = useSelector(authSelectors.getIsLoggedIn);\r\n  return (\r\n    <header style={styles.header}>\r\n      <Navigation />\r\n      {isLoggedIn ? <UserMenu /> : <AuthNav />}\r\n    </header>\r\n  );\r\n}\r\n","import { useSelector } from 'react-redux';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { authSelectors } from '../components/Redux/auth';\r\n\r\n/**\r\n * 1. Он должен повторять API Route\r\n *  2. Он должен рендерить Route\r\n * - Если маршрут приватный и пользователь залогинен, рендерит компонент\r\n * - В противном случае рендерит Redirect на redirectTo\r\n */\r\n\r\nexport default function PrivateRoute({\r\n  children,\r\n  redirectTo = '/',\r\n  ...routeProps\r\n}) {\r\n  const isLoggedIn = useSelector(authSelectors.getIsLoggedIn);\r\n  return (\r\n    <Route {...routeProps}>\r\n      {isLoggedIn ? children : <Redirect to={redirectTo} />}\r\n    </Route>\r\n  );\r\n}\r\n","import { useSelector } from 'react-redux';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { authSelectors } from '../components/Redux/auth';\r\n\r\n/**\r\n * - Если маршрут ограниченный, и юзер залогинен, рендерит редирект на redirectTo\r\n * - В противном случае рендерит компонент\r\n *\r\n */\r\n\r\nexport default function PublicRoute({\r\n  children,\r\n  restricted = false,\r\n  redirectTo = '/',\r\n  ...routeProps\r\n}) {\r\n  const isLoggedIn = useSelector(authSelectors.getIsLoggedIn);\r\n  const shouldRedirect = isLoggedIn && restricted;\r\n  return (\r\n    <Route {...routeProps}>\r\n      {shouldRedirect ? <Redirect to={redirectTo} /> : children}\r\n    </Route>\r\n  );\r\n}\r\n","import { useEffect, Suspense, lazy } from 'react';\r\nimport ContactForm from \"../ContactForm/ContactForm\";\r\nimport ContactList from \"../ContactList/ContactList\";\r\nimport Filter from \"../Filter/Filter\";\r\nimport { Switch } from 'react-router-dom';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\n\r\nimport AppBar from '../AppBar';\r\nimport PrivateRoute from '../PrivateRoute';\r\nimport PublicRoute from '../PublicRoute';\r\nimport { authOperations, authSelectors } from '../Redux/auth';\r\n\r\nimport {\r\n  getContacts,\r\n  addContact,\r\n  deleteContact,\r\n} from \"../Redux/Contacts/contactsOperations\";\r\n\r\n\r\n\r\nimport { nanoid } from \"nanoid\";\r\nconst RegisterView = lazy(() => import('../views/RegisterView'));\r\nconst LoginView = lazy(() => import('../views/LoginView'));\r\n\r\n\r\nconst App = () => {\r\n  \r\n\r\n\r\n  const contacts = useSelector((state) => state.contacts.items);\r\n  const filter = useSelector((state) => state.contacts.filter);\r\n  const dispatch = useDispatch();\r\n  const isFetchingCurrentUser = useSelector(authSelectors.getIsFetchingCurrent);\r\n\r\n  useEffect(() => {\r\n    dispatch(authOperations.fetchCurrentUser());\r\n  }, [dispatch]);\r\n\r\n\r\n  useEffect(() => {\r\n    dispatch(getContacts());\r\n  }, [dispatch]);\r\n\r\n\r\n  ////////додає контакт\r\n\r\n  const addContacts1 = ({ name, number }) => {\r\n    if (\r\n      contacts.some(\r\n        (contact) =>\r\n          contact.name?.toLowerCase() === name.toLowerCase()\r\n      )\r\n    ) {\r\n      alert(`name \"${name}\" is already in list`);\r\n      return;\r\n    }\r\n    const newContact = {\r\n      // id: nanoid(),\r\n      name: name,\r\n      number: number,\r\n    };\r\n    console.log(newContact);\r\n    dispatch(addContact(newContact));\r\n\r\n  };\r\n  // шукає контакт\r\n\r\n  const handleFilterChange = (value) => {\r\n    filter(value);\r\n  };\r\n\r\n  ////видаляє контакт\r\n\r\n\r\n  const deleteContacts1 = (id) => () => {\r\n  dispatch(deleteContact(id));\r\n  };\r\n \r\n  return (\r\n    <div>\r\n           {isFetchingCurrentUser ? (\r\n        <h1>Показываем React Skeleton</h1>\r\n      ) : (\r\n          <>\r\n            <Switch>\r\n               <Suspense fallback={<p>Загружаем...</p>}>\r\n                <AppBar />\r\n                 <PublicRoute exact path=\"/register\" restricted>\r\n                  <RegisterView />\r\n                </PublicRoute>\r\n                 <PublicRoute exact path=\"/login\" redirectTo=\"/contacts\" restricted>\r\n                <LoginView />\r\n              </PublicRoute>\r\n<PrivateRoute path=\"/contacts\" redirectTo=\"/login\">\r\n      <h1>Phonebooc</h1>\r\n      <ContactForm onSubmit={addContacts1} />\r\n\r\n      <Filter\r\n        onChange={(e) => handleFilterChange(e.target.value)}\r\n      />\r\n      <ContactList\r\n        onDelete={deleteContacts1} \r\n                  />\r\n                  </PrivateRoute>\r\n                </Suspense>\r\n            </Switch>\r\n            </> )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { store, persistor } from './components/Redux/store ';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}